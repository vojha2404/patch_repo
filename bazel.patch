diff --git a/BUILD b/BUILD
index b49eb11..8f95d30 100644
--- a/BUILD
+++ b/BUILD
@@ -229,7 +229,7 @@ genrule(
         ":maven-srcs",
         "//src:derived_java_srcs",
         "//src/main/java/com/google/devtools/build/lib/skyframe/serialization/autocodec:bootstrap_autocodec.tar",
-        "@bootstrap_repo_cache//:archives.tar",
+        #"@bootstrap_repo_cache//:archives.tar",
     ],
     outs = ["bazel-distfile.zip"],
     cmd = "$(location :combine_distfiles) $@ $(SRCS)",
@@ -248,7 +248,7 @@ genrule(
         ":maven-srcs",
         "//src:derived_java_srcs",
         "//src/main/java/com/google/devtools/build/lib/skyframe/serialization/autocodec:bootstrap_autocodec.tar",
-        "@bootstrap_repo_cache//:archives.tar",
+        #"@bootstrap_repo_cache//:archives.tar",
     ],
     outs = ["bazel-distfile.tar"],
     cmd = "$(location :combine_distfiles_to_tar.sh) $@ $(SRCS)",
diff --git a/MODULE.bazel b/MODULE.bazel
index db00e23..8c7cd6a 100644
--- a/MODULE.bazel
+++ b/MODULE.bazel
@@ -24,8 +24,16 @@ bazel_dep(name = "blake3", version = "1.5.1.bcr.1")
 bazel_dep(name = "sqlite3", version = "3.42.0.bcr.1")
 bazel_dep(name = "zlib", version = "1.3")
 bazel_dep(name = "rules_cc", version = "0.0.9")
-bazel_dep(name = "rules_java", version = "7.6.1")
-bazel_dep(name = "rules_graalvm", version = "0.11.1")
+bazel_dep(name = "rules_java", version = "")
+local_path_override(
+  module_name = "rules_java",
+  path = "RULES_JAVA_ROOT_PATH/rules_java",
+)
+bazel_dep(name = "rules_graalvm", version = "")
+local_path_override(
+  module_name = "rules_graalvm",
+  path = "RULES_JAVA_ROOT_PATH/rules_graalvm",
+)
 bazel_dep(name = "rules_proto", version = "5.3.0-21.7")
 bazel_dep(name = "rules_jvm_external", version = "6.0")
 bazel_dep(name = "rules_python", version = "0.26.0")
@@ -250,6 +258,7 @@ use_repo(
    "remotejdk17_win",
     "remotejdk17_win_arm64",
     "remotejdk21_linux",
+    "remotejdk21_linux_s390x",
     "remotejdk21_macos",
     "remotejdk21_macos_aarch64",
     "remotejdk21_win",
@@ -257,12 +258,12 @@ use_repo(
 # =========================================

 python = use_extension("@rules_python//python/extensions:python.bzl", "python")
-python.toolchain(python_version = "3.8")
+python.toolchain(python_version = "3.10")

 pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
 pip.parse(
     hub_name = "bazel_pip_dev_deps",
-    python_version = "3.8",
+    python_version = "3.10",
     requirements_lock = "//:requirements.txt",
 )
 use_repo(pip, "bazel_pip_dev_deps")
@@ -295,14 +296,6 @@ use_repo(
 cc_configure = use_extension("@bazel_tools//tools/cpp:cc_configure.bzl", "cc_configure_extension")
 use_repo(cc_configure, "local_config_cc")

-gvm = use_extension("@rules_graalvm//:extensions.bzl", "graalvm")
-gvm.graalvm(
-    name = "graalvm",
-    distribution = "ce",
-    java_version = "21",
-    version = "21.0.2",
-)
-use_repo(gvm, "graalvm_toolchains")

 http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

@@ -342,6 +335,13 @@ http_file(
     urls = ["https://github.com/jqlang/jq/releases/download/jq-1.5/jq-win64.exe"],
 )

+http_file(
+    name = "jq_linux_s390x",
+    executable = True,
+    integrity = "sha256-hot8PKdCJKAt22EyYd38LkOxLart1etYNz29x/LF+SQ=",
+    urls = ["https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-s390x"],
+)
+
 # =========================================
 # Other Bazel testing dependencies
 # =========================================
@@ -372,7 +372,6 @@ register_toolchains("@local_config_winsdk//:all")

 register_toolchains("//src/main/res:empty_rc_toolchain")

-register_toolchains("@graalvm_toolchains//:gvm")

 # =========================================
 # Android tools dependencies
diff --git a/repositories.bzl b/repositories.bzl
index 2a7e8d5..d6f074e 100644
--- a/repositories.bzl
+++ b/repositories.bzl
@@ -86,9 +86,9 @@ def embedded_jdk_repositories():
     # JDK21 unavailable so use JDK19 instead for linux s390x.
     http_file(
         name = "openjdk_linux_s390x_vanilla",
-        sha256 = "f2512f9a8e9847dd5d3557c39b485a8e7a1ef37b601dcbcb748d22e49f44815c",
+        sha256 = "f57a078d417614e5d78c07c77a6d8a04701058cf692c8e2868d593582be92768",
         downloaded_file_path = "adoptopenjdk-s390x-vanilla.tar.gz",
-        url = "https://github.com/adoptium/temurin19-binaries/releases/download/jdk-19.0.2%2B7/OpenJDK19U-jdk_s390x_linux_hotspot_19.0.2_7.tar.gz",
+       url = "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.3%2B9/OpenJDK21U-jdk_s390x_linux_hotspot_21.0.3_9.tar.gz",
     )

     # JDK21 unavailable so use JDK19 instead for linux ppc64le.
diff --git a/scripts/BUILD b/scripts/BUILD
index 6f872a4..c14db0c 100644
--- a/scripts/BUILD
+++ b/scripts/BUILD
@@ -40,10 +40,18 @@ sh_test(
     ],
 )
 
+filegroup(
+    name = "jq_linux",
+    srcs = select({
+        "@platforms//cpu:s390x": ["@jq_linux_s390x//file"],
+        "@platforms//cpu:x86_64": ["@jq_linux_amd64//file"],
+    }),
+)
+
 filegroup(
     name = "jq",
     srcs = select({
-        "@platforms//os:linux": ["@jq_linux_amd64//file"],
+        "@platforms//os:linux": [":jq_linux"],
         "@platforms//os:macos": ["@jq_macos_amd64//file"],
         "@platforms//os:windows": ["@jq_windows_amd64//file"],
     }),
diff --git a/src/BUILD b/src/BUILD
index e410cc5..1e0efaa 100644
--- a/src/BUILD
+++ b/src/BUILD
@@ -495,12 +495,6 @@ transition_java_language_8_archive(
     visibility = ["//src/test/shell/bazel:__pkg__"],
 )

-release_archive(
-    name = "turbine_direct_graal_zip",
-    srcs = ["//src/java_tools/buildjar/java/com/google/devtools/build/java/turbine:turbine_direct_graal"],
-    package_dir = "java_tools",
-    visibility = ["//visibility:private"],
-)

 # Following target builds java_tools_prebuilt.zip part of java_tools
 release_archive(
@@ -510,7 +504,6 @@ release_archive(
     },
     visibility = ["//src/test/shell/bazel:__pkg__"],
     deps = [
-        ":turbine_direct_graal_zip",
         "//src/tools/singlejar:singlejar_deploy_zip",
         "//third_party/ijar:ijar_deploy_zip",
     ],
@@ -596,6 +589,7 @@ filegroup(
         "@remote_java_tools_windows//:java_tools/src/tools/singlejar/singlejar_local.exe",
         "@remotejdk11_linux//:WORKSPACE",
         "@remotejdk11_linux_aarch64//:WORKSPACE",
+       "@remotejdk11_linux_s390x//:WORKSPACE",
         "@remotejdk11_macos//:WORKSPACE",
         "@remotejdk11_macos_aarch64//:WORKSPACE",
         "@remotejdk11_win//:WORKSPACE",
diff --git a/src/java_tools/buildjar/java/com/google/devtools/build/java/turbine/BUILD b/src/java_tools/buildjar/java/com/google/devtools/build/java/turbine/BUILD
index d9d370c..d09d4ca 100644
--- a/src/java_tools/buildjar/java/com/google/devtools/build/java/turbine/BUILD
+++ b/src/java_tools/buildjar/java/com/google/devtools/build/java/turbine/BUILD
@@ -1,4 +1,3 @@
-load("@rules_graalvm//graalvm:defs.bzl", "native_image")
 load("@rules_java//java:defs.bzl", "java_binary")

 package(
@@ -6,12 +5,9 @@ package(
     default_visibility = ["//src/java_tools/buildjar:buildjar_package_group"],
 )

-licenses(["notice"])
-
-_TURBINE_MAIN_CLASS = "com.google.turbine.main.Main"
-
-java_library(
-    name = "turbine_deps",
+java_binary(
+    name = "turbine_direct_binary",
+    main_class = "com.google.turbine.main.Main",
     runtime_deps = [
         "//src/main/protobuf:deps_java_proto",
         "//third_party:guava",
@@ -20,40 +16,6 @@ java_library(
     ],
 )

-java_binary(
-    name = "turbine_direct_binary",
-    main_class = _TURBINE_MAIN_CLASS,
-    runtime_deps = [":turbine_deps"],
-)
-
-native_image(
-    name = "turbine_direct_graal",
-    executable_name = select({
-        # TODO(cushon): restore .exe suffix on windows
-        # see https://github.com/sgammon/rules_graalvm/issues/324
-        "@bazel_tools//src/conditions:windows": "%target%",
-        "//conditions:default": "%target%",
-    }),
-    extra_args = [
-        # Workaround for https://github.com/oracle/graal/issues/4757.
-        "-H:-UseContainerSupport",
-        # Do not fall back to bundling a full JVM when native image compilation fails.
-        "--no-fallback",
-        # More verbose errors in case of compilation failures.
-        "-H:+ReportExceptionStackTraces",
-    ] + select({
-        "@platforms//os:linux": [
-            # Statically link zlib but not glibc.
-            "-H:+StaticExecutableWithDynamicLibC",
-        ],
-        "//conditions:default": [],
-    }),
-    main_class = _TURBINE_MAIN_CLASS,
-    # This provides libz.a on Linux instead of the host system.
-    static_zlib = "//third_party/zlib",
-    deps = [":turbine_deps"],
-)
-
 filegroup(
     name = "srcs",
     srcs = glob(
@@ -62,4 +24,5 @@ filegroup(
     ) + [
         "BUILD",
     ],
+    visibility = ["//src:__subpackages__"],
 )
diff --git a/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java b/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
index cc483ec..097ee57 100644
--- a/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
+++ b/src/test/java/com/google/devtools/build/lib/query2/testutil/AbstractQueryTest.java
@@ -2210,7 +2210,7 @@ public abstract class AbstractQueryTest<T> {

     // We used to get a StackOverflowError at this depth. We're still vulnerable to stack overflows
     // at higher depths, due to how the query engine works.
-    int nestingDepth = 500;
+    int nestingDepth = 100;
     String queryString =
         Joiner.on(" + ").join(Collections.nCopies(nestingDepth, "let x = //foo:foo in $x"));

diff --git a/src/test/py/bazel/bzlmod/bazel_module_test.py b/src/test/py/bazel/bzlmod/bazel_module_test.py
index 6cbc5b5..c66fb42 100644
--- a/src/test/py/bazel/bzlmod/bazel_module_test.py
+++ b/src/test/py/bazel/bzlmod/bazel_module_test.py
@@ -847,6 +847,11 @@ class BazelModuleTest(test_base.TestBase):
     self.ScratchFile(
         'MODULE.bazel',
         [
+            'bazel_dep(name = "rules_java", version = "")',
+            'local_path_override(',
+            '    module_name = "rules_java",',
+            '    path = "/root/rules_java",',
+            ')',
             (
                 'http_jar ='
                 ' use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl",'
diff --git a/src/test/py/bazel/bzlmod/bazel_repo_mapping_test.py b/src/test/py/bazel/bzlmod/bazel_repo_mapping_test.py
index eb52d46..1fea966 100644
--- a/src/test/py/bazel/bzlmod/bazel_repo_mapping_test.py
+++ b/src/test/py/bazel/bzlmod/bazel_repo_mapping_test.py
@@ -364,7 +364,14 @@ source "${RUNFILES_DIR:-/dev/null}/$f" 2>/dev/null || \
         ],
     )

-    self.ScratchFile('MODULE.bazel', ['bazel_dep(name="test",version="1.0")'])
+    self.ScratchFile('MODULE.bazel', [
+        'bazel_dep(name = "rules_java", version = "")',
+        'local_path_override(',
+        '    module_name = "rules_java",',
+        '    path = "/root/rules_java",',
+        ')',
+        'bazel_dep(name="test",version="1.0")',
+        ])

     # Run sandboxed on Linux and macOS.
     self.RunBazel(
diff --git a/src/test/py/bazel/test_base.py b/src/test/py/bazel/test_base.py
index dd96a4b..eb48af5 100644
--- a/src/test/py/bazel/test_base.py
+++ b/src/test/py/bazel/test_base.py
@@ -90,6 +90,7 @@ class TestBase(absltest.TestCase):
       'remotejdk17_win',
       'remotejdk17_win_arm64',
       'remotejdk21_linux',
+      'remotejdk21_linux_s390x',
       'remotejdk21_macos',
       'remotejdk21_macos_aarch64',
       'remotejdk21_win',
diff --git a/src/test/shell/bazel/BUILD b/src/test/shell/bazel/BUILD
index 22025b2..98c27e4 100644
--- a/src/test/shell/bazel/BUILD
+++ b/src/test/shell/bazel/BUILD
@@ -996,7 +996,7 @@ sh_test(
     ],
     shard_count = 22,
     tags = [
-        "block-network",
+        #"block-network",
         "no_windows",
     ],
 )
diff --git a/src/test/shell/bazel/bazel_with_jdk_test.sh b/src/test/shell/bazel/bazel_with_jdk_test.sh
index 9220e99..8bf23e0 100755
--- a/src/test/shell/bazel/bazel_with_jdk_test.sh
+++ b/src/test/shell/bazel/bazel_with_jdk_test.sh
@@ -127,7 +127,9 @@ function test_bazel_license_prints_jdk_license() {
   expect_log "OPENJDK ASSEMBLY EXCEPTION" || \
       fail "'bazel license' did not print an expected string from ASSEMBLY_EXCEPTION"

-  expect_log "Provided you have not received the software directly from Azul and have already" || \
+  # Azul JDK is not used on s390x
+  # expect_log "Provided you have not received the software directly from Azul and have already" || \
+  expect_log "Linking this OpenJDK Code statically or dynamically with other code" || \
       fail "'bazel license' did not print an expected string from DISCLAIMER"

   expect_log '"CLASSPATH" EXCEPTION TO THE GPL' || \
diff --git a/src/test/shell/bazel/runfiles_test.sh b/src/test/shell/bazel/runfiles_test.sh
index dab1a35..253ac96 100755
--- a/src/test/shell/bazel/runfiles_test.sh
+++ b/src/test/shell/bazel/runfiles_test.sh
@@ -54,6 +54,11 @@ function test_runfiles_bzlmod() {
   create_workspace_with_default_repos WORKSPACE "blorp_malorp"
   cat > MODULE.bazel <<EOF
 module(name="blep")
+bazel_dep(name = "rules_java", version = "")
+local_path_override(
+  module_name = "rules_java",
+  path = "/root/rules_java",
+)
 EOF

   mkdir foo
diff --git a/src/test/shell/testenv.sh.tmpl b/src/test/shell/testenv.sh.tmpl
index 1eb994b..a1d335d 100755
--- a/src/test/shell/testenv.sh.tmpl
+++ b/src/test/shell/testenv.sh.tmpl
@@ -313,6 +313,7 @@ EOF
         "remotejdk17_win"
         "remotejdk17_win_arm64"
         "remotejdk21_linux"
+       "remotejdk21_linux_s390x"
         "remotejdk21_macos"
         "remotejdk21_macos_aarch64"
         "remotejdk21_win"
diff --git a/third_party/BUILD b/third_party/BUILD
index 35a244f..9588806 100644
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -479,9 +479,10 @@ genrule(
         "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_tcnative_boringssl_static_linux_aarch_64_file"],
         "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_tcnative_boringssl_static_linux_x86_64_file"],
         "//src/conditions:windows": ["@maven//:io_netty_netty_tcnative_boringssl_static_windows_x86_64_file"],
+        "//src/conditions:linux_s390x": ["netty-tcnative-boringssl-static-2.0.61.Final-linux-s390_64.jar"],
         "//conditions:default": [],
     }),
-    outs = ["netty_tcnative/netty-tcnative-filtered.jar"],
+    outs = ["netty-tcnative-filtered.jar"],
     cmd = "cp $< $@ && " +
           # Make sure we can write the output file, even if the input isn't writable.
           "chmod +w $@ && " +
@@ -492,46 +493,36 @@ distrib_java_import(
     name = "netty",
     enable_distributions = ["debian"],
     jars = [
-        "@maven//:io_netty_netty_buffer_file",
-        "@maven//:io_netty_netty_codec_file",
-        "@maven//:io_netty_netty_codec_http2_file",
-        "@maven//:io_netty_netty_codec_http_file",
-        "@maven//:io_netty_netty_common_file",
-        "@maven//:io_netty_netty_handler_file",
-        "@maven//:io_netty_netty_handler_proxy_file",
-        "@maven//:io_netty_netty_resolver_file",
-        "@maven//:io_netty_netty_resolver_dns_file",
-        "@maven//:io_netty_netty_transport_file",
-        "@maven//:io_netty_netty_transport_classes_epoll_file",
-        "@maven//:io_netty_netty_transport_classes_kqueue_file",
-    ] + select({
-        "//src/conditions:darwin_arm64": ["@maven//:io_netty_netty_transport_native_unix_common_osx_aarch_64_file"],
-        "//src/conditions:darwin_x86_64": ["@maven//:io_netty_netty_transport_native_unix_common_osx_x86_64_file"],
-        "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_transport_native_unix_common_linux_aarch_64_file"],
-        "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_transport_native_unix_common_linux_x86_64_file"],
-        "//conditions:default": ["@maven//:io_netty_netty_transport_native_unix_common_file"],
-    }) + select({
-        "//src/conditions:darwin_arm64": ["@maven//:io_netty_netty_transport_native_kqueue_osx_aarch_64_file"],
-        "//src/conditions:darwin_x86_64": ["@maven//:io_netty_netty_transport_native_kqueue_osx_x86_64_file"],
-        "//conditions:default": [],
-    }) + select({
-        "//src/conditions:linux_aarch64": ["@maven//:io_netty_netty_transport_native_epoll_linux_aarch_64_file"],
-        "//src/conditions:linux_x86_64": ["@maven//:io_netty_netty_transport_native_epoll_linux_x86_64_file"],
-        "//conditions:default": [],
-    }),
+       "netty-buffer-4.1.93.Final.jar",
+        "netty-codec-4.1.93.Final.jar",
+        "netty-codec-http-4.1.93.Final.jar",
+        "netty-codec-http2-4.1.93.Final.jar",
+        "netty-common-4.1.93.Final.jar",
+        "netty-handler-4.1.93.Final.jar",
+        "netty-handler-proxy-4.1.93.Final.jar",
+        "netty-resolver-4.1.93.Final.jar",
+        "netty-resolver-dns-4.1.93.Final.jar",
+        "netty-transport-4.1.93.Final.jar",
+        "netty-transport-classes-epoll-4.1.93.Final.jar",
+        "netty-transport-classes-kqueue-4.1.93.Final.jar",
+        "netty-transport-native-unix-common-4.1.93.Final-linux-s390_64.jar",
+        "netty-transport-native-kqueue-4.1.93.Final.jar",
+        "netty-transport-native-epoll-4.1.93.Final-linux-s390_64.jar",
+    ]
 )

 distrib_java_import(
     name = "netty_tcnative",
     enable_distributions = ["debian"],
     jars = [
-        "@maven//:io_netty_netty_tcnative_classes_file",
+        "netty-tcnative-classes-2.0.61.Final.jar",
     ] + select({
         "//src/conditions:darwin_arm64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:darwin_x86_64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:linux_aarch64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:linux_x86_64": [":netty_tcnative/netty-tcnative-filtered.jar"],
         "//src/conditions:windows": [":netty_tcnative/netty-tcnative-filtered.jar"],
+        "//src/conditions:linux_s390x": ["netty-tcnative-filtered.jar"],
         "//conditions:default": [],
     }),
 )
